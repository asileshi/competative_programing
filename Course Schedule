class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        graph={}
        for i in range(len(prerequisites)):
            if prerequisites[i][0] in graph:
                graph[prerequisites[i][0]]+=1
            else:
                graph[prerequisites[i][0]]=1
            if prerequisites[i][1] not in graph:
                graph[prerequisites[i][1]] =0
        q=deque()
        for i in graph:
            if graph[i]==0:
                q.append(i)
        visited=[]
        while q:
            current = q.popleft()
            visited.append(current)
            for i in range(len(prerequisites)):
                if current == prerequisites[i][1]:
                    graph[prerequisites[i][0]]-=1
                    if graph[prerequisites[i][0]] == 0:
                        q.append(prerequisites[i][0])
                        
        return len(visited) == len(graph)
              
                
